#+TITLE: My Emacs Configuration
#+AUTHOR: Christoph Uhlich
#+EMAIL: christoph@familie-uhlich.de
#+OPTIONS: num:nil
#+OPTIONS: creator:chuhlich
#+OPTIONS: tex:imagemagick
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
* Visual stuff and global settings
** General
   #+begin_src emacs-lisp
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8-unix)

(prefer-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)


(use-package pass)
(auth-source-pass-enable)

;; set default coding of buffers
(setq default-buffer-file-coding-system 'utf-8-unix)

(use-package request);toggl needs this
;; supress welcome screen
(setq inhibit-startup-message t)
;; Bind other-window to more accessible keys
(defun prev-window ()
  (interactive)
  (other-window -1))
(global-set-key (kbd "C-'") 'other-window)
(global-set-key (kbd "C-;") 'prev-window)

(setq gc-cons-threshold 1000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(use-package general)
; Keep temp and lock files out of my way...
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
;; load own listp sources from sync folder
(add-to-list 'load-path "~/SynologyDrive/Drive/emacsconfig") ;


(setq warning-minimum-level :error) ; avoid warning buffer to popup automatically
(add-to-list 'warning-suppress-log-types '(unlock-file))
(add-to-list 'warning-suppress-types '(unlock-file))
      #+end_src
** Emacs server
This will start the emacs server to provide interaction with org-protocol
Create a global shortcut of your choice and call /usr/bin/emacsclient org-protocol://capture?template=t
This will act like calling C-c within Emacs, but bringing Emacs to scope and you are
able to add your todo instantly from any other application...
Assure org-protocol module being active! Attention - this assumes you are running only one Emacs window(!)
#+begin_src emacs-lisp
(server-start)
(defadvice raise-frame (after make-it-work (&optional frame) activate)
  "Replaced wmctrl with gnome extension for Ubuntu wayland"
     (call-process
     "busctl" nil nil nil "--user" "call" "org.gnome.Shell" "/de/lucaswerkmeister/ActivateWindowByTitle" "de.lucaswerkmeister.ActivateWindowByTitle" "activateBySubstring" "s" "Emacs"))
(add-hook 'server-switch-hook 'raise-frame)
#+end_src
** Add short cut for fullscreen toggle 
I need this when switching between docked and stand alone mode.
#+begin_src emacs-lisp
(global-set-key (kbd "M-<f11>") 'toggle-frame-fullscreen)
(global-set-key (kbd "C-c t") 'treemacs)
#+end_src
** Switch window
#+begin_src emacs-lisp
(global-set-key (kbd "C-'") 'other-window)
(global-set-key (kbd "C-;") 'prev-window)
#+end_src
** comint and Shell modifications
Changed a default colour to "dodger blue" to make ls colours easier to see.
#+begin_src emacs-lisp
(setq ansi-color-names-vector ["black" "red3" "green3" "yellow3" "dodger blue" "olive drab" "cyan3" "gray90"])
#+end_src
Prevent inheriting of minibuffer-prompt's face. Gives better shell prompt colors.
#+begin_src emacs-lisp
(set-face-attribute 'comint-highlight-prompt nil ':inherit 'unspecified)
#+end_src
Prevent having to enter passwords in plain text.
#+begin_src emacs-lisp
(setq comint-password-prompt-regexp
      (concat comint-password-prompt-regexp
              "\\|^Password .*:\\s *\\'"))
#+end_src
Track shell directory when using shell in emacs (by inspecting procfs)
https://www.emacswiki.org/emacs/ShellDirtrackByProcfs
#+begin_src emacs-lisp
(defun track-shell-directory/procfs ()
  "Write docstring here."
  (shell-dirtrack-mode 0)
  (add-hook 'comint-preoutput-filter-functions
            (lambda (str)
              (prog1 str
                (when (string-match comint-prompt-regexp str)
                  (cd (file-symlink-p
                       (format "/proc/%s/cwd" (process-id
                                               (get-buffer-process
                                                (current-buffer)))))))))
            nil t))
(add-hook 'shell-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'shell-mode-hook 'track-shell-directory/procfs)
#+end_src
Set scroll behaviour similar to linux shell.
http://stackoverflow.com/questions/6780468/emacs-m-x-shell-and-the-overriding-of-bash-keyboard-bindings
#+begin_src emacs-lisp
(remove-hook 'comint-output-filter-functions
             'comint-postoutput-scroll-to-bottom)
#+end_src
** TAB settings
#+begin_src emacs-lisp
;; set tabs to indent as white spaces and set default tab width to 2 white spaces
(setq-default indent-tabs-mode nil)  ;; Always use spaces
(setq-default tab-width 2)
(setq-default standard-indent 2)
(setq-default js-switch-indent-offset 2)

;; Use LSP format instead of Emacs' built-in formatter
(setq-default electric-indent-inhibit t)
(remove-hook 'before-save-hook 'eglot-format-buffer)

;; setup: M-y saves the new yank to the clipboard.
(setq yank-pop-change-selection t)

(show-paren-mode 1)
(setq column-number-mode t)

;; minimalistic Emacs at startup
(menu-bar-mode 0)
(tool-bar-mode 0)
(set-scroll-bar-mode nil)
#+end_src
** Themes and icons
  #+begin_src emacs-lisp
(use-package all-the-icons)
(use-package nerd-icons)
#+end_src

Call all-the-icons-install-fonts if icons are not shown correctly in modeline.
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
; Don’t compact font caches during GC.
  (setq inhibit-compacting-font-caches t)
  (display-battery-mode 1))

(use-package doom-themes
  :after doom-modeline
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  ;; loading the theme is made in custom.el
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(defvar *cu-theme-dark* 'doom-vibrant)
(defvar *cu-theme-light* 'doom-one-light)
(defvar *cu-current-theme* *cu-theme-dark*)

;; disable other themes before loading new one
(defadvice load-theme (before theme-dont-propagate activate)
  "Disable theme before loading new one."
  (mapc #'disable-theme custom-enabled-themes))

(defun cu/next-theme (theme)
  (interactive)
  (progn
    (disable-theme *cu-current-theme*)
    (load-theme theme t))
  (setq *cu-current-theme* theme))

(defun cu/toggle-theme ()
  (interactive)
  (cond ((eq *cu-current-theme* *cu-theme-dark*) (cu/next-theme *cu-theme-light*))
        ((eq *cu-current-theme* *cu-theme-light*) (cu/next-theme *cu-theme-dark*))))

  #+end_src
** treemacs
  #+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :bind (("M-<up>" . treemacs-move-project-up)
         ("M-<down>" . treemacs-move-project-down)))
  #+end_src
*** treemacs-icons-dired
  #+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

  #+end_src
*** treemacs-magit
  #+begin_src emacs-lisp
(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

;; don't use global line highlight mode
(global-hl-line-mode 0)

  #+end_src
** default-text-scale
 #+begin_src emacs-lisp
(use-package default-text-scale)
 #+end_src
** eyebrowse
 I am using 6 eyebrowse views which I can switch between with F7-F12 - Currently I rename them after startup to Misc, Docs, Comm, Dev, Org, Mail.
 #+begin_src emacs-lisp
(use-package eyebrowse
  :ensure t
  :init
  (setq eyebrowse-keymap-prefix (kbd "C-c M-e"))
  (global-unset-key (kbd "C-c C-w"))
  :config
  (eyebrowse-mode t)
  (progn
            (define-key eyebrowse-mode-map (kbd "<f12>") 'eyebrowse-switch-to-window-config-1)
            (define-key eyebrowse-mode-map (kbd "<f11>") 'eyebrowse-switch-to-window-config-2)
            (define-key eyebrowse-mode-map (kbd "<f10>") 'eyebrowse-switch-to-window-config-3)
            (define-key eyebrowse-mode-map (kbd "<f9>") 'eyebrowse-switch-to-window-config-4)
            (define-key eyebrowse-mode-map (kbd "<f8>") 'eyebrowse-switch-to-window-config-5)
            (define-key eyebrowse-mode-map (kbd "<f7>") 'eyebrowse-switch-to-window-config-6)
            (define-key eyebrowse-mode-map (kbd "<f6>") 'eyebrowse-switch-to-window-config-7))
  )
 #+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src
* Copilot
#+begin_src emacs-lisp
(use-package copilot
  :vc (:url "https://github.com/copilot-emacs/copilot.el"
            :rev :newest
            :branch "main")
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word))
  :config (add-to-list 'copilot-major-mode-alist '("js-ts" . "javascript"))
  (add-to-list 'copilot-major-mode-alist '("html-ts" . "html")))

(use-package copilot-chat)

#+end_src
* Misc packages
** docker
 #+begin_src emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
 #+end_src
** google-translate
Translate word at point or complete region directly via google translate API call.

#+begin_src emacs-lisp
; this is a dependency of translate - if not there google-translate will cause a load error
(use-package popup)

(use-package google-translate
  :after eyebrowse
  :init
  (setq google-translate-backend-method 'curl)
  (setq google-translate-default-source-language "de")
  (setq google-translate-default-target-language "en")
  (setq google-translate-translation-directions-alist '(("en" . "de") ("de" . "en")))
  :config
  (when (and (string-match "0.11.14"
                           (google-translate-version))
             (>= (time-to-seconds)
		         (time-to-seconds
                  (encode-time 0 0 0 23 9 2018))))
    (defun google-translate--get-b-d1 ()
      ;; TKK='427110.1469889687'
      (list 427110 1469889687)))
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  (progn
    (define-key eyebrowse-mode-map (kbd "C-c g t") 'google-translate-smooth-translate)))
 #+end_src
** mqttclient-mode
 A self made MQTT client mode.
 #+begin_src emacs-lisp
   (add-to-list 'load-path "~/opensource/mqttclient-mode")
   (load-library "mqttclient-mode.el")

 #+end_src
** json-mode
 #+begin_src emacs-lisp
(use-package json-mode)
 #+end_src
** kill-ring-search
 #+begin_src emacs-lisp
(use-package kill-ring-search)
 #+end_src
** which key
   #+begin_src emacs-lisp
(use-package which-key)
   #+end_src
** plantuml
#+begin_src emacs-lisp
(use-package plantuml-mode
  :config
  (setq plantuml-jar-path "/home/chuhlich/opensource/plantuml/plantuml.jar")
  (setq org-plantuml-jar-path
        (expand-file-name "/home/chuhlich/opensource/plantuml/plantuml.jar"))
  (setq plantuml-default-exec-mode 'jar))

(add-to-list
  'org-src-lang-modes '("plantuml" . plantuml))
#+end_src
* Major modes and programming setups
** vue ts
#+begin_src emacs-lisp
(add-to-list 'load-path "/home/chuhlich/opensource/vue-ts-mode")
(require 'vue-ts-mode)

#+end_src


** lsp mode
#+begin_src emacs-lisp
(setq lsp-prefer-flymake nil)

(use-package lsp-mode
  :diminish "LSP"
  :ensure t
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook ((lsp-mode . lsp-diagnostics-mode)
         (lsp-mode . lsp-enable-which-key-integration)
         ((tsx-ts-mode
           typescript-ts-mode
           js-ts-mode) . lsp-deferred)
         (c-ts-mode          . lsp-deferred)
         (go-mode          . lsp-deferred)
         (vue-ts-mode . lsp-deferred)
         (c++-ts-mode        . lsp-deferred)
         (html-mode       . lsp-deferred)
         (sh-ts-mode         . lsp-deferred)
         (lsp-mode        . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred)
  :custom
  (lsp-idle-delay 0.6)
  (lsp-use-plist t))

(setq lsp-volar-take-over-mode nil)
(setq lsp-completion-provider :capf)

(use-package lsp-ui
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t))


(setq lsp-prefer-flymake nil)

(use-package exec-path-from-shell
  :defer t
  :init (exec-path-from-shell-initialize))

#+end_src
** Tailwind lsp
#+begin_src emacs-lisp
(use-package lsp-tailwindcss
  :init
  (setq lsp-tailwindcss-add-on-mode t))
#+end_src

** treesit config
#+begin_src emacs-lisp
(require 'treesit)
(treesit-available-p)

;; Treesit-Auto: einmalig Grammars installieren lassen
(use-package treesit-auto
  :custom
  (treesit-auto-install t) ;; einmal automatisch bauen, dann ist Ruhe
  :config
  ;; Quellen explizit setzen (empfehlenswert):
  (setq treesit-language-source-alist
	      '((bash "https://github.com/tree-sitter/tree-sitter-bash")
	        (cmake "https://github.com/uyha/tree-sitter-cmake")
	        (css "https://github.com/tree-sitter/tree-sitter-css")
	        (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	        (go "https://github.com/tree-sitter/tree-sitter-go" "v0.19.1")
	        (html "https://github.com/tree-sitter/tree-sitter-html")
	        (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	        (json "https://github.com/tree-sitter/tree-sitter-json")
	        (make "https://github.com/alemuller/tree-sitter-make")
	        (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	        (python "https://github.com/tree-sitter/tree-sitter-python")
	        (vue "https://github.com/ikatyang/tree-sitter-vue.git")
	        (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	        (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	        (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
  (global-treesit-auto-mode))

#+end_src

** go

#+begin_src emacs-lisp
;; Klassisches go-mode NICHT als Hauptmode verwenden,
;; nur für Tools wie gofmt/goimports laden:
(use-package go-mode
  :ensure t
  :commands (gofmt-before-save gofmt)
  :custom (gofmt-command "goimports"))

;; Immer go-ts-mode für .go verwenden
(use-package go-ts-mode
  :mode "\\.go\\'"
  :hook
  (go-ts-mode . my-go-setup))

(defun my-go-before-save ()
  "Format/Imports nur ausführen, wenn LSP bereit; sonst fallback."
  (cond
   ;; LSP ist aktiv → LSP-Format + Imports (nur wenn Server es kann)
   ((bound-and-true-p lsp-mode)
    (when (lsp-feature? "textDocument/formatting")
      (lsp-format-buffer))
    (when (lsp-feature? "textDocument/codeAction")
      (lsp-organize-imports)))
   ;; Fallback: goimports direkt, wenn vorhanden
   ((executable-find "goimports")
    (let ((gofmt-command "goimports"))
      (gofmt)))))

(defun my-go-setup ()
  (setq-local tab-width 2)
  (lsp-deferred)
  ;; pufferlokal (!), damit es nur in Go greift und erst nach Mode/LS init:
  (add-hook 'before-save-hook #'my-go-before-save nil t))

(use-package go-tag
  :ensure t
  )

(use-package godoctor
  :ensure t
  )
#+end_src

** yaml

#+begin_src emacs-lisp
(use-package yaml-mode
  )
#+end_src

* dockerfile-mode
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile.*\\'"
  )
#+end_src
* flycheck etc.
** Flycheck
 #+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode)
  )

(setq js-indent-level 2)
(flycheck-add-mode 'javascript-eslint 'ts-ts-mode)

 #+end_src
** flycheck-color-mode-line
 #+begin_src emacs-lisp
(use-package flycheck-color-mode-line
  :after flycheck
  :config '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
  )
 #+end_src
** flycheck-pos-tip
 #+begin_src emacs-lisp
(use-package flycheck-pos-tip
  :after flycheck
  :config (flycheck-pos-tip-mode)
  )
 #+end_src
* Vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package marginalia
  :ensure t
  :init
  (marginalia-mode))

(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)
   ("C-;" . embark-dwim)
   ("C-h B" . embark-bindings)))
(use-package embark
  :defer t
  :commands (embark-act
             embark-dwim
             embark-export
             embark-collect
             embark-bindings
             embark-prefix-help-command))

(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package consult
  :defer t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Enhance register preview with thin lines and no mode line.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult for xref locations with a preview feature.
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))

(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
* Corfu in buffer completion
#+begin_src emacs-lisp
(use-package corfu
  :after orderless
  :defer t
  :commands (corfu-mode global-corfu-mode)
  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode))
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([ tab ] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
  :custom
  (corfu-cycle t)           ;; Enable cycling for `corfu-next/previous'
  (corfu-preselect 'prompt) ;; Always preselect the prompt
  (corfu-auto t)            ;; Enables auto-completion
  (corfu-popupinfo-mode t)  ;; Enable popup information
  (corfu-auto-delay 0.1)    ;; lower delay for completion
  
  (completion-ignore-case t)

  (text-mode-ispell-word-completion nil) ;; Disable Ispell completion
  
  :config
  (global-corfu-mode))

(use-package cape                ; Collection of At-Point Extensions
  :after corfu
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-emoji))

(use-package kind-icon :after corfu
  :custom (kind-icon-default-face 'corfu-default))

(unless (display-graphic-p)
  (use-package corfu-terminal :after corfu :config (corfu-terminal-mode +1)))

#+end_src
* yasnippet
#+begin_src emacs-lisp
(yas-global-mode)
#+end_src
* markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))

(use-package markdown-toc)
#+end_src
* ag
#+begin_src emacs-lisp
(use-package ag)
#+end_src
* Git handling
Magit is the incredible git client within emacs!
Whenever in a repo - press =C-x g= to get a separate status buffer.
#+begin_src emacs-lisp
(require 'transient)
(use-package magit)

;; need to install libsqlite3 from system (sudo apt-get ...)
(use-package sqlite3)
;; (use-package forge
;;   :after magit
;;   :config
;;   (push '("gitlab.qvest-digital.com"               ; GITHOST
;;         "gitlab.qvest-digital.com/api/v4"        ; APIHOST
;;         "gitlab.qvest-digital.com"               ; WEBHOST and INSTANCE-ID
;;         forge-gitlab-repository)    ; CLASS
;;       forge-alist))

(use-package yaml)
#+end_src
* terraform mode
#+begin_src emacs-lisp
(use-package terraform-mode)
#+end_src
* npm mode
  #+begin_src emacs-lisp
(use-package npm-mode)
  #+end_src
* expand-region
#+begin_src emacs-lisp
(use-package expand-region)
#+end_src
* idle-highlight-mode
#+begin_src emacs-lisp
(use-package idle-highlight-mode
  :config
  (defun idle-highlight-mode-hook ()
    (make-local-variable 'column-number-mode)
    (column-number-mode t)
    (idle-highlight-mode t))
  (add-hook 'emacs-lisp-mode-hook 'idle-highlight-mode-hook)
  (add-hook 'c-mode-common-hook 'idle-highlight-mode-hook)
  )
  #+end_src
* Org
** org mode
 #+begin_src emacs-lisp
(use-package verb)
(use-package org
  :bind (("C-c M" . 'org-agenda-view))
  :config
  ;; Activate Org-babel languages.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(;; other Babel languages
     (python . t)
     (shell . t)
     (C . t)
     (lisp . t)
     (latex . t)
     (plantuml . t)))
  (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
  (setq org-babel-python-command "python3")
  (setq py-python-command "python3")
  (setq org-todo-keywords
        '((sequence "TODO" "ONGOING" "WAITING" "|" "DONE" "DELEGATED" "CANCELED")))
  (setq org-default-notes-file (concat "~/notes/inbox.org"))
  ;; This will allow refiling into all files from the agenda file list
  ;; https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  
  (add-hook 'org-timer-done-hook 'my-org-timer-done)

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
  (defun my-org-timer-done ()
    (shell-command "canberra-gtk-play --file=/usr/share/sounds/gnome/default/alerts/string.ogg"))
  )

(use-package org-ai)
(use-package org-journal)
(use-package org-msg)
(use-package org-roam)
(use-package org-roam-ui)
(use-package org-superstar)
(use-package org-super-agenda)

 #+end_src
** org-toggl
 #+begin_src emacs-lisp
(add-to-list 'load-path "~/opensource/org-toggl")
(load-library "org-toggl")
(toggl-get-workspaces)
(toggl-get-projects)
(org-toggl-integration-mode)
(defun my-check-toggl-project-hook ()
  (when (eq (org-entry-get nil "toggl-project") nil)
    (call-interactively 'org-toggl-set-project)))

(add-hook 'org-clock-in-hook 'my-check-toggl-project-hook)
(define-key org-mode-map (kbd "C-c C-x s") 'org-toggl-set-project)
(define-key org-mode-map (kbd "C-c C-x u") 'org-toggl-update-timestamp-at-point)

 #+end_src
** org-gcal
I am using gmail for work. But I currently only use synching downwards.
Syncing into gmail was not yet in my scope.
*** TODO I m looking for a nice way to integrate calendar items directly by using mu4e (reading the ical file attachment).
   #+begin_src emacs-lisp
(use-package org-gcal
  :ensure t
  :config
  (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-fetch) ))
  (defun new/org-gcal-notify (title mes)
    (message "org-gcal::%s - %s" title mes))
  (fset 'org-gcal--notify 'new/org-gcal-notify))
;  (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) )))
   #+end_src
** org-protocol
 #+begin_src emacs-lisp
(require 'org-protocol)

(add-to-list 'org-protocol-protocol-alist
             '("Add journal entry"
               :protocol "roam-journal"
               :function org-journal-new-entry
               :kill-client t))
 #+end_src
** org-bullets-mode
 #+begin_src emacs-lisp
;; Using bullets instead of *
(use-package org-superstar
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

 #+end_src
** org roam
   #+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n g" . org-roam-ui-mode)
         ("C-c n I" . org-roam-insert-immediate)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :custom
  (org-roam-completion-everywhere t)
  :init
  (setq org-roam-v2-ack t)
  (require 'org-roam-protocol)

  (setq myroamfiles (directory-files "~/SynologyDrive/Drive/org/roam" t "org$"))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5) (myroamfiles :maxlevel . 5)))
  ; add refile targets added in custom-el to refile between standard org and roam files
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

  #+end_src
** org-roam-ui
#+begin_src emacs-lisp
(use-package "websocket"
  :after org-roam)
(use-package "simple-httpd"
  :after org-roam)

(use-package "org-roam-ui"
  :after org-roam)
#+end_src
** ox-reveal
With org reveal you can add an easy way to create reveal presentations directly from your org file.

 #+begin_src :tangle no
#+REVEAL_ROOT: file:///home/chuhlich/opensource/reveal.js
#+reveal_overview: t
#+REVEAL_INIT_OPTIONS: transition: 'concave'
#+REVEAL_THEME: white
#+REVEAL_EXTRA_CSS: ./tarentreveal.css
#+EXPORT_AUTHOR: Christoph Uhlich
#+EXPORT_DATE: 2020-03-21
#+EXPORT_TITLE: My Title
#+EXPORT_EMAIL: Test@example.com
#+EXPORT_OPTIONS: num:nil toc:nil reveal_keyboard:t reveal_overview:t
#+EXPORT_REVEAL_HLEVEL: 3
#+EXPORT_REVEAL_MARGIN: 200
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
 #+end_src

 #+begin_src emacs-lisp
(use-package ox-reveal
  :init
  (setq org-reveal-root "/home/chuhlich/opensource/reveal.js"))

(global-set-key (kbd "C-c O") '(lambda (&optional arg) (interactive "P")(org-agenda arg "z")))
(global-set-key (kbd "C-c s") '(lambda (&optional arg) (interactive "P")(org-switchb)))
 #+end_src

** Experimental custom agenda view


#+begin_src emacs-lisp
(use-package org-super-agenda
  :after org
  :config
  (add-hook 'org-mode-hook (lambda () (org-super-agenda-mode 1)))
  
 (setq org-agenda-custom-commands
   '(("z" "Super view"
      ((agenda ""
               ((org-agenda-breadcrumbs-separator " ❱ ")
                (org-agenda-remove-tags t)
                (org-agenda-start-on-weekday nil)
                (org-agenda-start-day "+0d")
                (org-agenda-span 'day)
;                (org-agenda-prefix-format "  %-2i %-13b")
                (org-agenda-skip-scheduled-if-done t)
                (org-agenda-skip-timestamp-if-done t)
                (org-agenda-skip-deadline-if-done t)
                (org-agenda-repeating-timestamp-show-all nil)
                (org-agenda-remove-tags t)
                (org-agenda-prefix-format "  %-3i  %-15b%t %s")
                (org-agenda-todo-keyword-format " ☐ ")
                (org-agenda-time nil)
                (org-agenda-current-time-string "⮜┈┈┈┈┈┈┈ now")))
       (alltodo ""
                ((org-agenda-overriding-header "")
                 (org-super-agenda-groups
                  '((:name "⚡ Next to do:" :tag "nextaction" :order 1)
                    (:name "⚡ Important:" :tag "Important" :priority "A" :order 6)
                    (:name "⚡ Due Today:" :deadline today :order 2)
                    (:name "⚡ Overdue:" :deadline past :order 7)
                    (:name "⚡ Due Soon:" :deadline ((before)
                                                     (org-read-date nil nil "+5")) :order 8)
                    (:name "⚡ Waiting:" :todo "WAITING" :order 20)
                    (:name "⚡ Projects:" :auto-category t :todo
                           ("TODO" "ONGOING")
                           :order 22)
                    (:name "⚡ trivial:" :priority<= "C" :tag
                           ("Trivial" "Unimportant")
                           :todo
                           ("SOMEDAY")
                           :order 90)
                    (:discard
                     (:tag
                      ("Chore" "Routine" "Daily"))))))))
      nil))))

(setq org-agenda-block-separator (string-to-char " "))
(setq org-agenda-format-date 'my-org-agenda-format-date-aligned)

(defun my-org-agenda-format-date-aligned (date)
  "Format a DATE string for display in the daily/weekly agenda, or timeline.
          This function makes sure that dates are aligned for easy reading."
  (require 'cal-iso)
  (let* ((dayname (calendar-day-name date 1 nil))
         (day (cadr date))
         (day-of-week (calendar-day-of-week date))
         (month (car date))
         (monthname (calendar-month-name month 1))
         (year (nth 2 date))
         (iso-week (org-days-to-iso-week
                    (calendar-absolute-from-gregorian date)))
         (weekyear (cond ((and (= month 1) (>= iso-week 52))
                          (1- year))
                         ((and (= month 12) (<= iso-week 1))
                          (1+ year))
                         (t year)))
         (weekstring (if (= day-of-week 1)
                         (format " W%02d" iso-week)
                       "")))
    (format " %-2s. %2d %s"
            dayname day monthname)))

(add-hook 'org-mode-local-vars-hook #'(lambda () (eldoc-mode -1)))
  #+end_src

** Origami for super-agenda
   #+begin_src emacs-lisp
(use-package origami
:general (:keymaps 'org-super-agenda-header-map
                      "<tab>" #'origami-toggle-node)
  :config
  (defvar cu/org-super-agenda-auto-show-groups
    '("Schedule" "Priority A items" "Priority B items"))

  (defun cu/org-super-agenda-origami-fold-default ()
    "Fold certain groups by default in Org Super Agenda buffer."
    (forward-line 3)
    (cl-loop do (origami-forward-toggle-node (current-buffer) (point))
             while (origami-forward-fold-same-level (current-buffer) (point)))
    (--each cu/org-super-agenda-auto-show-groups
      (goto-char (point-min))
      (when (re-search-forward (rx-to-string `(seq bol " " ,it)) nil t)
        (origami-show-node (current-buffer) (point)))))

  :hook ((org-agenda-mode . origami-mode))
;         (org-agenda-finalize . cu/org-super-agenda-origami-fold-default))
  )
   #+end_src

** org-drill flash cards
Setting entry-empty-p function to nil will avoid ignoring empty bodied drill items.
   #+begin_src emacs-lisp
;(use-package org-drill
;  :config
;  (defun org-drill-entry-empty-p () nil))
   #+end_src

** org-ai
#+begin_src emacs-lisp
(use-package org-ai
  :ensure t
  :commands (org-ai-mode
             org-ai-global-mode)
  :init
  (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
  (org-ai-global-mode) ; installs global keybindings on C-c M-a
  :config
  (setq org-ai-default-chat-model "gpt-4o")) ; if you are on the gpt-4 beta:
  ;(org-ai-install-yasnippets)) ; if you are using yasnippet and want `ai` snippets
#+end_src

** ox-report
#+begin_src emacs-lisp
(use-package ox-report)
#+end_src

* ibuffer
Enter a buffer overview by pressing =C-x C-b=.
More info:

http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html
http://ergoemacs.org/emacs/emacs_buffer_management.html
http://stackoverflow.com/questions/1231188/emacs-list-buffers-behavior

#+begin_src emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . 'ibuffer)
  :config
  ;; Define IBuffer filter modes.
  (setq ibuffer-saved-filter-groups
        '(("home"
           ("emacs-config" (or (filename . ".emacs.d")
                               (filename . "emacs-config")))
           ("Org" (or (mode . org-mode)
                      (filename . "OrgMode")))
           ("code" (filename . "src"))
           ("Magit" (name . "\*magit\*"))
           ("Help" (or (name . "\*Help\*")
                       (name . "\*Apropos\*")
                       (name . "\*info\*"))))))

  ;; Load filter.
  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-switch-to-saved-filter-groups "home")))
  )

* Latex

#+begin_src emacs-lisp
(defun my-latex ()
  "Latex mode customizations"
  (auto-fill-mode t)
  (reftex-mode t)
  (TeX-engine-set "luatex")
  (setq TeX-command-default "LuaLaTeX")
  (setq TeX-electric-math (cons "$" "$") ) ; auto close dollars
  (setq TeX-electric-sub-and-superscript t) ; use _{} instead of _
<<<<<<< HEAD
  (setq font-latex-fontify-script 'multi-level)) ; 2^2^2 as multiple scripts
=======
  (setq font-latex-fontify-script 'multi-level) ; 2^2^2 as multiple scripts
  ;; Use zathura for previews
  (setq TeX-PDF-mode t)
  (setq TeX-source-correlate-mode t)
;  (add-to-list 'TeX-view-program-selection '(output-pdf "Zathura"))
  ;; Hide some boilerplate
  (TeX-fold-mode 1)
  ;; Big faces for sections, chapters, etc.
  (set-face-attribute 'font-latex-sectioning-1-face nil
                      :foreground "#ffcc66" :height 1.5 :bold t)
  (set-face-attribute 'font-latex-sectioning-2-face nil
                      :foreground "#ffcc66" :height 1.2 :bold t)
  (set-face-attribute 'font-latex-sectioning-3-face nil
                      :foreground "#ffcc66" :height 1.2 :bold nil)
  )
>>>>>>> 66a4e04 (Copilot, go mode misc)
(add-hook 'LaTeX-mode-hook 'my-latex)

#+end_src

* Mail
#+begin_src emacs-lisp
(use-package async)

(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
; mu4e Mails
(require 'mu4e)
(require 'subr-x)

(setq mu4e-mu-home "~/.cache/mu/")

(setq   mu4e-headers-first-child-prefix '("\\" . "┗▶")
        mu4e-headers-duplicate-prefix '("=" . "≡")
        mu4e-headers-default-prefix '("|" . "┃")
        mu4e-headers-draft-mark '("D" . "✎")
        mu4e-headers-flagged-mark '("F" . "⚑")
        mu4e-headers-new-mark '("N" . "✱")
        mu4e-headers-passed-mark '("P" . "✈")
        mu4e-headers-replied-mark '("R" . "☇")
        mu4e-headers-seen-mark '("S" . "✅")
        mu4e-headers-trashed-mark '("T" . "🗑")
        mu4e-headers-attach-mark '("a" . "⎙")
        mu4e-headers-encrypted-mark '("x" . "🔒")
        mu4e-headers-signed-mark '("s" . "🔒")
        mu4e-headers-unread-mark '("u" . "❗")
        mu4e-view-show-addresses 't)

(define-key mu4e-headers-mode-map (kbd "C-d") 'mu4e-dashboard)
(define-key mu4e-headers-mode-map (kbd "C-c c") 'org-mu4e-store-and-capture)
(define-key mu4e-view-mode-map    (kbd "C-c c") 'org-mu4e-store-and-capture)
(setq org-mu4e-link-query-in-headers-mode nil
      org-mu4e-convert-to-html t)

;rename files when moving
;;NEEDED FOR MBSYNC
(setq mu4e-change-filenames-when-moving t)
;;(setq mu4e-maildir "~/Maildir")


(setq mail-user-agent 'mu4e-user-agent)

  ;; set `mu4e-context-policy` and `mu4e-compose-policy` to tweak when mu4e should
  ;; guess or ask the correct context, e.g.

  ;; start with the first (default) context; 
  ;; default is to ask-if-none (ask when there's no context yet, and none match)
  ;; (setq mu4e-context-policy 'pick-first)

  ;; compose with the current context is no context matches;
  ;; default is to ask 
  ;; (setq mu4e-compose-context-policy nil)                                        ;

(setq org-mu4e-link-query-in-headers-mode nil)

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "mbsync")

(require 'smtpmail)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)
(load-library "mu4e-contexts.el")
(add-to-list 'load-path "~/opensource/mu4e-dashboard")
(require 'mu4e-dashboard)

;; add tagging
(add-to-list 'mu4e-marks
           '(tag
             :char "i"
             :prompt "tag"
             :ask-target (lambda () (completing-read "Set project tag or custom tag: "
                              (or toggl-projects '()) ;; Use toggl-projects or fallback to empty list
                              nil
                              nil))
             :action (lambda (docid msg target)
                       (mu4e-action-retag-message msg (concat "+" target)))))

(defun my-mu4e-mark-add-tag()
  "Add a tag to the message at point."
  (interactive)
  (mu4e-headers-mark-and-next 'tag))

(define-key mu4e-headers-mode-map (kbd "c") #'my-mu4e-mark-add-tag)

#+end_src
* Helper functions
This can be used with REST Client mode for retrieving user/pass to avoid pasting
** Create auth string from prompt
With this function you can prompt for user and password. This is usefull in verb to avoid pasting 
your credentials into the REST API files. Call this from within the mode via lisp execution:
 #+begin_src :tangle no
:myAuth := (getAuthString)
:device_auth =  <<
Authorization: Basic :myAuth
#+end_src
Verb can also use this.
 #+begin_src emacs-lisp
(defun getAuthString ()
  "Retrieve Auth header for REST Client"
  (interactive)
  (concat "Basic " (base64-encode-string (concat (read-string "User: ") ":" (password-read "Password: "))))
  )
#+end_src
** Get file name + path
Show the full path and filename in minibuffer and copy it to killring.
 #+begin_src emacs-lisp
(defun show-file-name ()
  "Show the full path file name in the minibuffer and copy to kill ring."
  (interactive)
  (message (buffer-file-name))
  (kill-new (buffer-file-name)))
 #+end_src
** A custom var for agenda contexts
Holds a list of files / folders. With =cu/org-agenda-context-options= you can switch your org context eg. to =WORK=, =PRIVATE= or =BOTH=. 
You can define the context names yourself in the customization setup.
The current setup is =cu/org-agenda-context=
 #+begin_src emacs-lisp
(defcustom cu/org-agenda-context-options nil
  "An a list of different contexts for agenda loading."
  :type '(alist))

(defcustom cu/org-agenda-context nil
  "The current set key to org-agenda-context-options, which is used for loading the agenda."
  :type '(string))

(defun cu/choose-org-context ()
  "Choose the org agenda context from the alist."
  (interactive)
  (let* ((options (mapcar #'car cu/org-agenda-context-options))
         (choice (completing-read "Describe function: " options nil t nil nil (thing-at-point 'symbol))))
    (setq cu/org-agenda-context choice)
    (setq org-agenda-files (cdr (assoc choice cu/org-agenda-context-options)))
    (message "Using %s file set for org-agenda." cu/org-agenda-context)))
#+end_src
Allow inline execution of specific babel modes.
 #+begin_src emacs-lisp
(defun cu/org-confirm-babel-evaluate (lang body)
  "Do not ask for confirmation on code execution in org BODY for LANG."
  (not (member lang '("latex"))))
#+end_src
* Tail (provide)
 #+begin_src emacs-lisp

(provide 'init)
 #+end_src

* init Windowconfig
#+begin_src emacs-lisp
(defun my-initial-window-setup ()
    ;; study lisp workspace
    (eyebrowse-switch-to-window-config-1)
    (eyebrowse-rename-window-config 1 "Mail")

    ;; Org
    (eyebrowse-switch-to-window-config-2)
    (eyebrowse-rename-window-config 2 "Org")

    ;; Code
    (eyebrowse-switch-to-window-config-3)
    (eyebrowse-rename-window-config 3 "Code")
    
    ;; Docs
    (eyebrowse-switch-to-window-config-4)
    (eyebrowse-rename-window-config 4 "Docs")
    
    ;; Misc
    (eyebrowse-switch-to-window-config-5)
    (eyebrowse-rename-window-config 5 "Misc")

    (eyebrowse-switch-to-window-config-1)
    (delete-other-windows)
    (mu4e)
    (mu4e-dashboard)
    )

(org-toggl-set-workspace "Christoph's workspace")
(add-hook 'window-setup-hook 'my-initial-window-setup)
#+end_src
